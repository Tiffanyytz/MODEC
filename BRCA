#tranform omics data as a list
Data_omics_brca = [Data_brcam1, Data_brcam2, Data_brcam3]

#Using 40 as the rank value of latent subspace.
Ujoint40, sil40, rstar40 = joint_view_fixedrank(Data_omics_brca, 4, 40)

#The number of clusters selection
for num_clusters in range(2,15):
    clusterer = KMeans(n_clusters=num_clusters)
    preds = clusterer.fit_predict(Ujoint_40)
    # centers = clusterer.cluster_centers_
    score = silhouette_score (Ujoint_40, preds, metric='euclidean')
    print ("For n_clusters = {}, Kmeans silhouette score is {})".format(num_clusters, score))

Ujoint40.rename_axis(None, inplace=True)
Ujoint40 = Ujoint40.to_numpy()
c = pd.DataFrame(Ujoint40)
x = c

# computing an auxiliary target distribution
def target_distribution(q):
    weight = q ** 2 / q.sum(0)
    return (weight.T / weight.sum(1)).T
    
loss = 0
index = 0
maxiter = 20000
update_interval = 10
tol = 0.001 # tolerance threshold to stop training
index_array = np.arange(x.shape[0])

for ite in range(int(maxiter)):
    if ite % update_interval == 0:
        q = model.predict(x, verbose=0)
        p = target_distribution(q)  
    idx = index_array[index * batch_size: min((index+1) * batch_size, x.shape[0])]
    loss = model.train_on_batch(x=x.iloc[idx], y=p[idx])
    index = index + 1 if (index + 1) * batch_size <= x.shape[0] else 0

q = model.predict(x, verbose=0)
p = target_distribution(q) 
y_pred = q.argmax(1).rename_axis(None, inplace=True)

#map predicted list to the reported subtype list_tcga
remap_labels(y_pred,list_tcga)

#mapping algorithm
def remap_labels(pred_labels, true_labels):
    """Rename prediction labels (clustered output) to best match true labels."""
    # from itertools import permutations # import this into script.
    pred_labels, true_labels = np.array(pred_labels), np.array(true_labels)
    assert pred_labels.ndim == 1 == true_labels.ndim
    assert len(pred_labels) == len(true_labels)
    cluster_names = np.unique(pred_labels)
    accuracy = 0

    perms = np.array(list(permutations(np.unique(true_labels))))

    remapped_labels = true_labels
    for perm in perms:
        flipped_labels = np.zeros(len(true_labels))
        for label_index, label in enumerate(cluster_names):
            flipped_labels[pred_labels == label] = perm[label_index]

        testAcc = np.sum(flipped_labels == true_labels) / len(true_labels)
        if testAcc > accuracy:
            accuracy = testAcc
            remapped_labels = flipped_labels

    return accuracy, remapped_labels
